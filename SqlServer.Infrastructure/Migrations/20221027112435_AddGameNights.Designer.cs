// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using SqlServer.Infrastructure;

#nullable disable

namespace SqlServer.Infrastructure.Migrations
{
    [DbContext(typeof(DomainDbContext))]
    [Migration("20221027112435_AddGameNights")]
    partial class AddGameNights
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.10")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("Core.Domain.Address", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("City")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("HouseNumber")
                        .HasColumnType("int");

                    b.Property<string>("Street")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Address");
                });

            modelBuilder.Entity("Core.Domain.Allergy", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("FoodId")
                        .HasColumnType("int");

                    b.Property<int>("Name")
                        .HasColumnType("int");

                    b.Property<int?>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("FoodId");

                    b.HasIndex("UserId");

                    b.ToTable("Allergies");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Description = "Gluten",
                            Name = 4
                        },
                        new
                        {
                            Id = 2,
                            Description = "Lactose",
                            Name = 1
                        },
                        new
                        {
                            Id = 3,
                            Description = "Noten",
                            Name = 0
                        },
                        new
                        {
                            Id = 4,
                            Description = "Soja",
                            Name = 2
                        },
                        new
                        {
                            Id = 5,
                            Description = "Tarwe",
                            Name = 3
                        },
                        new
                        {
                            Id = 6,
                            Description = "Vegetarisch",
                            Name = 5
                        });
                });

            modelBuilder.Entity("Core.Domain.Drink", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<bool>("ContainsAlcohol")
                        .HasColumnType("bit");

                    b.Property<int?>("GameNightId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("GameNightId");

                    b.ToTable("Drinks");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            ContainsAlcohol = true,
                            Name = "Bier"
                        },
                        new
                        {
                            Id = 2,
                            ContainsAlcohol = false,
                            Name = "Water"
                        },
                        new
                        {
                            Id = 3,
                            ContainsAlcohol = false,
                            Name = "Cola"
                        },
                        new
                        {
                            Id = 4,
                            ContainsAlcohol = true,
                            Name = "Wijn"
                        },
                        new
                        {
                            Id = 5,
                            ContainsAlcohol = false,
                            Name = "Fanta"
                        });
                });

            modelBuilder.Entity("Core.Domain.Food", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int?>("GameNightId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("GameNightId");

                    b.ToTable("Food");
                });

            modelBuilder.Entity("Core.Domain.Game", b =>
                {
                    b.Property<int?>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int?>("Id"), 1L, 1);

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Genre")
                        .HasColumnType("int");

                    b.Property<string>("Image")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsOnlyForAdults")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Type")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("Games");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Description = "Versimpelde versie van pesten!",
                            Genre = 0,
                            Image = "https://img.poki.com/cdn-cgi/image/quality=78,width=600,height=600,fit=cover,f=auto/26c6e4e18eeaa62590fccd44ea7812f8.png",
                            IsOnlyForAdults = false,
                            Name = "Uno",
                            Type = 0
                        },
                        new
                        {
                            Id = 2,
                            Description = "Het spel met treinen!",
                            Genre = 0,
                            Image = "https://media.s-bol.com/4zrr6XMkgVXn/550x536.jpg",
                            IsOnlyForAdults = false,
                            Name = "Ticket to Ride",
                            Type = 1
                        },
                        new
                        {
                            Id = 3,
                            Description = "Het spel met geld!",
                            Genre = 0,
                            Image = "https://www.bruna.nl/images/active/carrousel/fullsize/5010993414338_front.jpg",
                            IsOnlyForAdults = true,
                            Name = "Monopoly",
                            Type = 1
                        },
                        new
                        {
                            Id = 4,
                            Description = "Beantwoord zoveel mogelijk vragen in 30 seconde!",
                            Genre = 0,
                            Image = "https://play-lh.googleusercontent.com/vLezygtbLfIe6fi23WCg9Mc4jZn2CW1_6EWBraSCukUGsIpPaBQ7yUN14x4SVggzh3g",
                            IsOnlyForAdults = true,
                            Name = "30 Seconds",
                            Type = 1
                        });
                });

            modelBuilder.Entity("Core.Domain.GameNight", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("AddressId")
                        .HasColumnType("int");

                    b.Property<DateTime>("DateTime")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsOnlyForAdults")
                        .HasColumnType("bit");

                    b.Property<bool>("IsPotluck")
                        .HasColumnType("bit");

                    b.Property<int>("MaxPlayers")
                        .HasColumnType("int");

                    b.Property<int>("OrganizerId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("AddressId");

                    b.ToTable("GameNights");
                });

            modelBuilder.Entity("Core.Domain.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int?>("AddressId")
                        .HasColumnType("int");

                    b.Property<DateTime>("BirthDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Gender")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Type")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("AddressId");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("GameGameNight", b =>
                {
                    b.Property<int>("GameNightsId")
                        .HasColumnType("int");

                    b.Property<int>("GamesId")
                        .HasColumnType("int");

                    b.HasKey("GameNightsId", "GamesId");

                    b.HasIndex("GamesId");

                    b.ToTable("GameGameNight");
                });

            modelBuilder.Entity("GameNightUser", b =>
                {
                    b.Property<int>("GameNightsId")
                        .HasColumnType("int");

                    b.Property<int>("PlayersId")
                        .HasColumnType("int");

                    b.HasKey("GameNightsId", "PlayersId");

                    b.HasIndex("PlayersId");

                    b.ToTable("GameNightUser");
                });

            modelBuilder.Entity("Core.Domain.Allergy", b =>
                {
                    b.HasOne("Core.Domain.Food", null)
                        .WithMany("Allergies")
                        .HasForeignKey("FoodId");

                    b.HasOne("Core.Domain.User", null)
                        .WithMany("Allergies")
                        .HasForeignKey("UserId");
                });

            modelBuilder.Entity("Core.Domain.Drink", b =>
                {
                    b.HasOne("Core.Domain.GameNight", null)
                        .WithMany("Drinks")
                        .HasForeignKey("GameNightId");
                });

            modelBuilder.Entity("Core.Domain.Food", b =>
                {
                    b.HasOne("Core.Domain.GameNight", null)
                        .WithMany("Foods")
                        .HasForeignKey("GameNightId");
                });

            modelBuilder.Entity("Core.Domain.GameNight", b =>
                {
                    b.HasOne("Core.Domain.Address", "Address")
                        .WithMany()
                        .HasForeignKey("AddressId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Address");
                });

            modelBuilder.Entity("Core.Domain.User", b =>
                {
                    b.HasOne("Core.Domain.Address", "Address")
                        .WithMany()
                        .HasForeignKey("AddressId");

                    b.Navigation("Address");
                });

            modelBuilder.Entity("GameGameNight", b =>
                {
                    b.HasOne("Core.Domain.GameNight", null)
                        .WithMany()
                        .HasForeignKey("GameNightsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Core.Domain.Game", null)
                        .WithMany()
                        .HasForeignKey("GamesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("GameNightUser", b =>
                {
                    b.HasOne("Core.Domain.GameNight", null)
                        .WithMany()
                        .HasForeignKey("GameNightsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Core.Domain.User", null)
                        .WithMany()
                        .HasForeignKey("PlayersId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Core.Domain.Food", b =>
                {
                    b.Navigation("Allergies");
                });

            modelBuilder.Entity("Core.Domain.GameNight", b =>
                {
                    b.Navigation("Drinks");

                    b.Navigation("Foods");
                });

            modelBuilder.Entity("Core.Domain.User", b =>
                {
                    b.Navigation("Allergies");
                });
#pragma warning restore 612, 618
        }
    }
}
